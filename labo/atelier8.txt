-- Sequence creation
CREATE SEQUENCE SEQ_Langue
MINVALUE 1
START WITH 1
INCREMENT BY 1
CACHE 20;
  
-- Trigger creation
CREATE OR REPLACE TRIGGER pLangue_Langue
	BEFORE INSERT ON LANGUE
	FOR EACH ROW
BEGIN
	SELECT SEQ_Langue.NEXTVAL INTO :new.pLangue FROM DUAL;
END;

-- Q1.1) 
-- Insertion avant gachette
INSERT INTO Usager(pUsager, cUsager, pLangue, cRue, cMobile, bActif) VALUES (1, 'Tomas', 1, '9999 Ontario E.', '+1-000-000-0000', 1);

-- Insertion apres gachette
INSERT INTO Usager(cUsager, pLangue, cRue, cMobile, bActif) VALUES ('Tomas', 1, '9999 Ontario E.', '+1-000-000-0000', 1);
-- La difference est que le champ pUsager est gere par le systeme ("automatiquement" via le combo trigger + sequence)


-- Q2)

CREATE OR REPLACE PROCEDURE
 p_ajout_usager(_cUsager IN VARCHAR(50), _cRue IN VARCHAR(200), _cMobile IN VARCHAR(50), 
 _cPassword IN VARCHAR(64), _cCourriel IN VARCHAR(200), _pLangue IN NUMBER);
IS
 -- Recuperer la cle primaire Usager
 vpUsager NUMBER;
BEGIN
	-- On assume aussi que le trigger sur Usager existe (on vient de le creer)
	-- On assume que l'usager n'existe pas: on ne gere pas le replacement
	INSERT INTO Usager(cUsager, pLangue, cRue, cMobile, bActif) 
	VALUES (_cUsager, _pLangue, _cRue, _cMobile, 1)
	RETURNING pUsager INTO vpUsager; -- cle primaire
	-- On assume que Connection possede un trigger et une sequence pour auto-increment pConnection
	INSERT INTO Connection(cCourriel, cPassword, pUsager) VALUES (_cCourriel, _cPassword, vpUsager);

END p_ajout_usager;

-- Q2.1) EXECUTE p_ajout_usager('Tomas', '9999 Ontario E.', '+1-000-000-0000', 'moncourriel@gmail.com', 'monPasswordSecure++', 1);

-- Q2.2) Oui, on peut faire une transaction et un ROLLBACK si une erreur arrive
-- SAVEPOINT avant_ajout_user au debut + block EXCEPTION WHEN OTHERS avec ROLLBACK TO avant_ajout_user;


-- Q3)

-- Procedure de remplacement de mot de passe
CREATE OR REPLACE PROCEDURE
 p_change_pw(_cOldPW IN VARCHAR(200), _cNewPW IN VARCHAR(200), _pUsager IN NUMBER, _cIP IN VARCHAR(50), _cBrowser IN VARCHAR(200));
IS
	vpUsager NUMBER;
	vMdpCheck NUMBER;
BEGIN
	SELECT pUsager INTO vpUsager FROM Connexion WHERE pUsager = _pUsager AND cPassword = _cOldPW;
	IF pUsager <> NULL THEN
		-- validation de MDP
		vMdpCheck = f_verifierMdp(_cNewMdp, _cOldPW);
		IF vMdpCheck <> 0 THEN
			UPDATE Connexion SET cPassword = _cNewPW WHERE pUsager = _pUsager;
			-- ceci declenche le trigger
			
		END
	END IF;
END p_change_pw;

-- Fonction de verification du mot de passe
CREATE OR REPLACE FUNCTION f_verifierMdp(_cNewMdp IN VARCHAR(200), _cOldPW IN VARCHAR(200)) RETURN NUMBER 
IS
	vIsValid NUMBER;
BEGIN
	-- si +8 characteres et different du mdp courrant
	IF LEN(_cNewMdp) >= 8 AND _cNewMdp <> _cOldPW THEN
		vIsValid = 1;-- valide
	ELSE
		vIsValid = 0;-- invalide
	END IF;
	RETURN vIsValid;
END; 

-- Gachette de journalisation
CREATE OR REPLACE TRIGGER tbu_Connexionq
BEFORE UPDATE ON Connexion
FOR EACH ROW
BEGIN
	IF :old.cPassword <> :new.cPassword
		SELECt cIp INTO vCip From XSession WHERE pUsager = :old.pUsager;
		-- On assume que le trigger existe (pSecurite)
		INSERT INTO Securite(cSecurite, dDemande, cIP, cBrowser, pUsager)
		VALUES ('Changement de MDP', NOW(), cIp, '????', :old.pUsager);
		-- recuperer les valeurs de session ?
	END IF;
END;

-- Q4)
-- modification du code 
-- Procedure de remplacement de mot de passe
CREATE OR REPLACE PROCEDURE
 p_change_pw(_cOldPW IN VARCHAR(200), _cNewPW IN VARCHAR(200), _pUsager IN NUMBER, _cIP IN VARCHAR(50), _cBrowser IN VARCHAR(200));
IS
	vpUsager NUMBER;
	vMdpCheck NUMBER;
BEGIN
	SAVEPOINT avant_mise_a_jour_mdp;
	SELECT pUsager INTO vpUsager FROM Connexion WHERE pUsager = _pUsager AND cPassword = _cOldPW;
	IF pUsager <> NULL THEN
		-- validation de MDP
		vMdpCheck = f_verifierMdp(_cNewMdp, _cOldPW);
		IF vMdpCheck <> 0 THEN
			UPDATE Connexion SET cPassword = _cNewPW WHERE pUsager = _pUsager;
			-- ceci declenche le trigger
		ELSE
			RAISE ERROR_INVALID_MDP;
		END
	ELSE
		RAISE ERROR_INVALID_KEY;
	END IF;
	EXCEPTION
		WHEN ERROR_INVALID_KEY THEN
			raise_application_error (-20001, 'pUsager invalide');
			ROLLBACK TO avant_mise_a_jour_mdp; -- retourne a l'etat du debut
		WHEN ERROR_INVALID_MDP THEN
			raise_application_error (-20003, 'Mot de passe invalide');
		WHEN OTHERS THEN
			raise_application_error (-20002, 'Une erreur est survenue.... Too bad...');
END p_change_pw;

-- ecraser du code : soit DROP PROCEDURE [procedure], soit CREATE OR REPLACE PROCEDURE [procedure]
